{"ast":null,"code":"var _jsxFileName = \"/home/kirito/web_develop/video-sync-app/src/VideoSyncApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VideoSyncApp() {\n  _s();\n  const [verificationCode, setVerificationCode] = useState('');\n  const videoPlayerRef = useRef(null);\n  const handleConnect = () => {\n    fetch('http://localhost:8080/verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        verificationCode\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.success) {\n        // Verification successful, start synchronized video playback\n        const videoPlayer = videoPlayerRef.current;\n        videoPlayer.src = data.videoUrl;\n        videoPlayer.play();\n        // Establish WebSocket connection for synchronization\n        const socket = new WebSocket('ws://localhost:8080');\n        socket.onopen = () => {\n          socket.send(JSON.stringify({\n            verificationCode,\n            action: 'join'\n          }));\n        };\n        socket.onmessage = event => {\n          const message = JSON.parse(event.data);\n          if (message.action === 'sync') {\n            videoPlayer.currentTime = message.currentTime;\n          }\n        };\n        videoPlayer.addEventListener('timeupdate', () => {\n          socket.send(JSON.stringify({\n            verificationCode,\n            action: 'update',\n            currentTime: videoPlayer.currentTime\n          }));\n        });\n      } else {\n        alert('Invalid verification code');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoPlayerRef,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: verificationCode,\n      onChange: e => setVerificationCode(e.target.value),\n      placeholder: \"Enter verification code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConnect,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(VideoSyncApp, \"V+qL2w8R10XWWBxicUxPhgkrgKY=\");\n_c = VideoSyncApp;\nexport default VideoSyncApp;\nvar _c;\n$RefreshReg$(_c, \"VideoSyncApp\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","VideoSyncApp","_s","verificationCode","setVerificationCode","videoPlayerRef","handleConnect","fetch","method","headers","body","JSON","stringify","then","response","json","data","success","videoPlayer","current","src","videoUrl","play","socket","WebSocket","onopen","send","action","onmessage","event","message","parse","currentTime","addEventListener","alert","catch","error","console","children","ref","controls","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/kirito/web_develop/video-sync-app/src/VideoSyncApp.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nfunction VideoSyncApp() {\n    const [verificationCode, setVerificationCode] = useState('');\n    const videoPlayerRef = useRef(null);\n\n    const handleConnect = () => {\n        fetch('http://localhost:8080/verify', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ verificationCode })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                // Verification successful, start synchronized video playback\n                const videoPlayer = videoPlayerRef.current;\n                videoPlayer.src = data.videoUrl;\n                videoPlayer.play();\n                // Establish WebSocket connection for synchronization\n                const socket = new WebSocket('ws://localhost:8080');\n                socket.onopen = () => {\n                    socket.send(JSON.stringify({ verificationCode, action: 'join' }));\n                };\n                socket.onmessage = (event) => {\n                    const message = JSON.parse(event.data);\n                    if (message.action === 'sync') {\n                        videoPlayer.currentTime = message.currentTime;\n                    }\n                };\n                videoPlayer.addEventListener('timeupdate', () => {\n                    socket.send(JSON.stringify({ verificationCode, action: 'update', currentTime: videoPlayer.currentTime }));\n                });\n            } else {\n                alert('Invalid verification code');\n            }\n        }).catch(error => {\n            console.error('Error:', error);\n          });\n    };\n\n    return (\n        <div>\n            <video ref={videoPlayerRef} controls></video>\n            <input \n                type=\"text\" \n                value={verificationCode} \n                onChange={(e) => setVerificationCode(e.target.value)} \n                placeholder=\"Enter verification code\"\n            />\n            <button onClick={handleConnect}>Connect</button>\n        </div>\n    );\n}\n\nexport default VideoSyncApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}